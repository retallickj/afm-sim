clear allclose all%Constantshbar=1.054571628e-34; %Jsm=9.110e-31; %kgepsil=8.854e-12;q=1.602e-19;hbareV =hbar/q; %hbar in eVkB=1.38064852e-23; %J/KkBeV = kB/q;T=4.5;kT=kBeV*T;%to be computed via Coulomb potentialsDeltaG=0;%interdot coupling between nearest neighbourst=0.001;%reorganization (self-trapping) energylambda=0.04;%confirm we can get a rate in single digits to match our observationst^2/hbareV*sqrt(pi/(lambda*kT))*exp(-(DeltaG+lambda)^2/(4*lambda*kT))%define the atomic array and inital electron positions and initial lifetimesatomArray = [1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1];numAtoms = length(atomArray);electronArray = [1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1];sigmaL=0.2;electronLifeTime = [exprnd(1),0,0,0,0,0,exprnd(1),0,0,0,0,exprnd(1),0,0,0,exprnd(1)];%crude approach but manually defined a AFM profile for full and empty DBs%as long as tunneling terms are proper profile shape is just for visualization%manual profile%DBProfile = [0,0.25,0.5,1,1,0.5,0.25,0];%emptyProfile = [0,0.05,0.1,0.2,0.2,0.1,0.05,0];%normal profileDBProfile = [-2.* normpdf([-10:1:10],0,5)];emptyProfile = [0.2.*normpdf([-10:1:10],0,5)];imageLine=[];for i=1:1:numAtoms  imageLine=[imageLine, electronArray(i)*DBProfile+(1-electronArray(i))*emptyProfile];end%plot of one AFM scan with initial charge placementsplot(imageLine);%define maps of important valuesdistanceMap=zeros(numAtoms, numAtoms);transferIntMap=zeros(numAtoms, numAtoms);hoppingRateMap = zeros(numAtoms, numAtoms);%creat full map of distances and rates between sitesfor i = 1:1:numAtoms  for j=1:1:numAtoms      distanceMap(i,j) = abs(i-j);      if(i!=j)        transferIntMap(i,j) = t/distanceMap(i,j)^2*atomArray(i)*atomArray(j);        hoppingRateMap(i,j) = transferIntMap(i,j)^2/hbareV*sqrt(pi/(lambda*kT))*exp(-(DeltaG+lambda)^2/(4*lambda*kT))*atomArray(i)*atomArray(j);      endif  endforendforhoppingRateMap%distanceMap%transferIntMap%hoppingRateMap%AFM line scan periodinterscanTime = 1;%simulation dtsampleTime = 0.05/(t^2/hbareV*sqrt(pi/(lambda*kT))*exp(-(DeltaG+lambda)^2/(4*lambda*kT)));numStepsBetweenScans = interscanTime/sampleTime;%dumb programmer check%dumb programmer checkif(numStepsBetweenScans >100)  disp('Probably too many steps between scans, you may be waiting');endifif(numStepsBetweenScans >200)  disp('Too many steps between scans, eject!');  returnendif%for each line in the 100 line scan imagefor lineNum=1:1:100  if(0==mod(lineNum,10))numElectrons = sum(electronArray)endif%within each line scan a number of hopping steps take place.for k=1:1:numStepsBetweenScans  %update partition function of the Marcus/Boltzmann distribution based on present occupation  marcuPartitionMap = zeros(numAtoms,1);  for i = 1:1:numAtoms    for j = 1:1:numAtoms      if (i!=j)        marcuPartitionMap(i) += hoppingRateMap(i,j)*(1-electronArray(j));      endif    endfor  endfor  %marcuPartitionMap  numElectrons = sum(electronArray);  %one step where each electron in the array makes a hopping decision  randomNum=round(rand()*100+1);  totalProb=0;  newElectronArray = zeros(numAtoms,1);  for i = 1:1:numAtoms    if (electronArray(i)==1)      %disp('found a candidate electron');      %need to check if lifetime has expired and decision needs to be made      if (electronLifeTime(i)<=0)        nextSite=i;        for j = 1:1:numAtoms          if (electronArray(j) == 0) && (i!=j) && (atomArray(j)==1)            %disp('found a viable hopping site');            if(totalProb<randomNum)              nextSite = j;              totalProb += round(hoppingRateMap(i,j)/marcuPartitionMap(i)*100);            endif          endif        endfor%j        %transfer electron to new site        electronArray(i)=0;        if(newElectronArray(nextSite)==1)          disp('electron collision, duck!');          newElectronArray(i)=1;        else newElectronArray(nextSite)=1;        endif        %need to reset and add initial lifetime at new location        electronLIfeTime(i)=0;        electronLifeTime(nextSite)=exprnd(1);      %otherwise decriment lifetime and keep electron where it is      else        %keep electron in same location        electronArray(i)=0;        newElectronArray(i)=1;        %decriment lifetime        electronLifeTime(i)-= sampleTime * marcuPartitionMap(i);      endif%electronLifeTime    endif  endfor%i=numAtoms  electronArray=newElectronArray;endfor%k=numStepsBetweenScans  imageLine=[];  for i=1:1:numAtoms    imageLine=[imageLine, electronArray(i)*DBProfile+(1-electronArray(i))*emptyProfile];  end  imageArray(lineNum,:)=imageLine;endimage(imageArray,'CDataMapping','scaled');