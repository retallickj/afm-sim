#!/bin/bash

# A script that generates appropriate siqadconn binaries and Python wrapper with the help of SWIG. If the "FOR_OS" environment variable is set to "win64", then cross-compilation for 64-bit Windows is assumed; else, a native compilation on Linux environment is assumed.
#
# When performing cross-compilation for Windows, you need files in the "libs" and "include" directories from a Python installation on Windows (e.g. C:\Users\USERNAME\AppData\Local\Programs\Python\PythonXY\{libs,include}). This script assumes that those files have been copied to the machine performing the cross compilation. The variables WIN_PYTHON_PATH, WIN_PYTHON_VERS and WIN_PYTHON_ARCH indicate the path, available versions and architectures.
# On the compilation machine, the directories are set up as follows:
# /hdd/global/win_python/Python{35,36,37}-64/{libs,include}
#
# At the time of writing, cross-compilation targeting 32-bit Windows has not been tested yet.

swig -v -python -c++ siqadconn.i
DEST_DIR=..
WIN_PYTHON_PATH=/hdd/global/win_python
declare -a WIN_PYTHON_VERS=(
    "35"
    "36"
    "37"
)
declare -a WIN_PYTHON_ARCH=(
    "32"
    "64"
)

if [ "$FOR_OS" == "win64" ] || [ "$FOR_OS" == "win32" ]; then
    # This is written specifically for the Ubuntu 18.04 LTS cross-compilation environment. You will need to adapt this script to your system configuration if you wish to perform cross-compilation.
    export PATH="$PATH:/usr/lib/mxe/usr/bin"
    MAKE_COMMAND=x86_64-w64-mingw32.static-g++

    # Compile
    $MAKE_COMMAND -O2 -fPIC -Wall -Wextra -std=c++11 -c siqadconn.cc

    # Link to existing Windows Python libraries
    for PYTHON_VER in "${WIN_PYTHON_VERS[@]}"
    do
        for PYTHON_ARCH in "${WIN_PYTHON_ARCH[@]}"
        do
            # The extension for the compiled pyd file should take one of the following forms:
            #   .cpXY-win_amd64.pyd (Windows 64-bit)
            #   .cpXY-win32.pyd (Windows 32-bit)
            # with XY indicating Python version X.Y (e.g. 36 for Python 3.6)
            if [ "$PYTHON_ARCH" == "64" ]; then
                PYD_EXT=cp"$PYTHON_VER"-win_amd64.pyd
            else
                PYD_EXT=cp"$PYTHON_VER"-win32.pyd
            fi

            WIN_PYTHON_INCLUDE="$WIN_PYTHON_PATH"/Python"$PYTHON_VER"-"$PYTHON_ARCH"/include
            WIN_PYTHON_LIBS="$WIN_PYTHON_PATH"/Python"$PYTHON_VER"-"$PYTHON_ARCH"/libs

            $MAKE_COMMAND -O2 -fPIC -Wall -Wextra -std=c++11 -c siqadconn_wrap.cxx -I"$WIN_PYTHON_INCLUDE" -L"$WIN_PYTHON_LIBS" -lpython"$PYTHON_VER"
            $MAKE_COMMAND -shared -o _siqadconn."$PYD_EXT" siqadconn.o siqadconn_wrap.o -static-libstdc++ -I"$WIN_PYTHON_INCLUDE" -L"$WIN_PYTHON_LIBS" -lpython"$PYTHON_VER"
        done
    done

    # Move the compiled binary to the destination
    mv _siqadconn.cp*.pyd "${DEST_DIR}"
else
    python3 setup.py build_ext --inplace
    mv _siqadconn*.so "${DEST_DIR}"
fi

# Move the generated wrapper Python code to the destination
mv siqadconn.py "${DEST_DIR}"

# backup for minimal compilation script on Linux:
#g++ -O2 -fPIC -Wall -Wextra -std=c++11 -c phys_connector.cc
#g++ -O2 -fPIC -Wall -Wextra -std=c++11 -c phys_connector_wrap.cxx -I/usr/include/python3.6m
#g++ -shared -o _phys_connector.so phys_connector.o phys_connector_wrap.o -static-libstdc++
